---
# yamllint disable rule:line-length

# This is a re-usable workflow, meant to be called as a step from other
# workflows. It is not meant to be triggered on its own.

# This will take a continer image that was previously stored as a build artifact
# and push it to a container registry.

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      artifact-name:
        description: Name of the previously uploaded artifact
        required: true
        type: string
      image-filename:
        description: Name of the image tar in the artifact
        default: image.tar
        required: false
        type: string
      image-name:
        description: Name of the container image to push
        required: true
        type: string
      multiarch:
        description: Whether the image is multi-architecture
        required: false
        default: false
        type: boolean
    secrets:
      registry-username:
        description: Username for the image registry
        required: true
      registry-password:
        description: Password for the image registry
        required: true

jobs:
  push-to-registry:
    runs-on: ubuntu-latest

    # Local registry is reqruied till https://github.com/docker/cli/issues/3350 is solved.
    services:
      registry:
        image: registry:3.0.0
        ports:
          - 5000:5000

    steps:

      - name: Load container artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ inputs.artifact-name }}
          path: /tmp
        if: ${{ !inputs.multiarch }}

      - name: Import container image
        run: |
          docker load -i /tmp/${{ inputs.image-filename }}
          docker inspect ${{ inputs.image-name }}
          LOCAL_IMAGE=localhost:5000/${{ inputs.image-name }}
          docker tag ${{ inputs.image-name }} $LOCAL_IMAGE
          docker push $LOCAL_IMAGE
        if: ${{ !inputs.multiarch }}

      - name: Load container artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: ${{ inputs.artifact-name }}-*
          path: /tmp
        if: ${{ inputs.multiarch }}

      - name: Import and merge container image
        run: |
          MANIFEST=""
          for i in /tmp/${{ inputs.artifact-name }}-*/${{ inputs.image-filename }}; do
            docker load -i $i
            docker inspect ${{ inputs.image-name }}:latest
            ARCH_TAG=$(basename $(dirname $i))
            SINGLE_IMAGE=localhost:5000/${{ inputs.image-name }}:$ARCH_TAG
            docker tag ${{ inputs.image-name }} $SINGLE_IMAGE
            docker push $SINGLE_IMAGE
            MANIFEST="$MANIFEST --amend $SINGLE_IMAGE"
          done
          LOCAL_IMAGE=localhost:5000/${{ inputs.image-name }}
          docker manifest create --insecure $LOCAL_IMAGE $MANIFEST
          docker manifest push $LOCAL_IMAGE
          docker manifest inspect $LOCAL_IMAGE
        if: ${{ inputs.multiarch }}

      - name: Login to registry
        # If the registry server is specified in the image name, we use that.
        # If the server isn't in the image name, default to docker.io
        run: |
          [[ "${{ inputs.image-name }}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          skopeo login -u "${{ secrets.registry-username }}" -p "${{ secrets.registry-password }}" ${REGISTRY}

      # If we're on the default branch, we push to :latest
      - name: Push to registry (as :latest)
        if: github.ref_name == github.event.repository.default_branch
        run: |
          skopeo copy --multi-arch all --src-tls-verify=false docker://localhost:5000/${{ inputs.image-name }} "docker://${{ inputs.image-name }}"

      # if we're on a non-default branch, push to that ref name
      - name: Push to registry (branch)
        if: github.ref_name != github.event.repository.default_branch &&
            github.ref_type == 'branch'
        run: |
          TAG="${{ github.ref_name }}"
          echo "Pushing to $TAG"
          skopeo copy --multi-arch all --src-tls-verify=false docker://localhost:5000/${{ inputs.image-name }} "docker://${{ inputs.image-name }}:${TAG}"

      # if we're on a tag, strip the leading "v" and push to that ref name
      - name: Push to registry (tag)
        if: github.ref_type == 'tag'
        run: |
          [[ "${{ github.ref_name }}" =~ ^v([0-9]+.*) ]] || exit 0
          TAG="${BASH_REMATCH[1]}"
          echo "Pushing to $TAG"
          skopeo copy --multi-arch all --src-tls-verify=false docker://localhost:5000/${{ inputs.image-name }} "docker://${{ inputs.image-name }}:${TAG}"
